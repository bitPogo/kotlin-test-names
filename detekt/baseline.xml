<?xml version="1.0" ?>
<SmellBaseline>
  <ManuallySuppressedIssues></ManuallySuppressedIssues>
  <CurrentIssues>
    <ID>EmptyKtFile:settings.gradle.kts$.settings.gradle.kts</ID>
    <ID>FunctionNaming:Accessors33qjl5yednlyp9tyvd6yykvt5.kt$internal fun org.gradle.api.plugins.BasePluginExtension.`ext`(configure: Action&lt;org.gradle.api.plugins.ExtraPropertiesExtension&gt;): Unit</ID>
    <ID>FunctionNaming:Accessors365te60wp7h43wszbvbl7a76x.kt$internal fun org.gradle.api.Project.`spotless`(configure: Action&lt;com.diffplug.gradle.spotless.SpotlessExtension&gt;): Unit</ID>
    <ID>FunctionNaming:Accessors3lkj8uvuyc1fes1zjdaceqluw.kt$internal fun org.gradle.api.internal.plugins.DefaultArtifactPublicationSet.`ext`(configure: Action&lt;org.gradle.api.plugins.ExtraPropertiesExtension&gt;): Unit</ID>
    <ID>FunctionNaming:Accessors46nwrg1rs44ofdqpi7vyy3pfc.kt$internal fun org.gradle.api.artifacts.dsl.RepositoryHandler.`ext`(configure: Action&lt;org.gradle.api.plugins.ExtraPropertiesExtension&gt;): Unit</ID>
    <ID>FunctionNaming:Accessors8lcri9ibgd9oj8dt3t8z8nvfx.kt$internal fun org.gradle.api.artifacts.dsl.DependencyHandler.`ext`(configure: Action&lt;org.gradle.api.plugins.ExtraPropertiesExtension&gt;): Unit</ID>
    <ID>FunctionNaming:Accessors9ofjxssccbksmuzem03z8pl6.kt$internal fun org.gradle.api.Project.`base`(configure: Action&lt;org.gradle.api.plugins.BasePluginExtension&gt;): Unit</ID>
    <ID>FunctionNaming:Accessorsaofthkmarv0q41bodk71vcqi7.kt$internal fun org.gradle.api.Project.`defaultArtifacts`(configure: Action&lt;org.gradle.api.internal.plugins.DefaultArtifactPublicationSet&gt;): Unit</ID>
    <ID>FunctionNaming:Accessorsblypoh2ruc9u3bx9djsfqsntg.kt$internal fun org.gradle.api.Project.`ext`(configure: Action&lt;org.gradle.api.plugins.ExtraPropertiesExtension&gt;): Unit</ID>
    <ID>FunctionNaming:Accessorsed7e04c18w9g7176u3w1ie44j.kt$internal fun com.diffplug.gradle.spotless.SpotlessExtension.`ext`(configure: Action&lt;org.gradle.api.plugins.ExtraPropertiesExtension&gt;): Unit</ID>
    <ID>FunctionNaming:ArchivesConfigurationAccessors.kt$@Deprecated(message = "The archives configuration has been deprecated for dependency declaration. Please use the 'implementation' or 'api' configuration instead.") internal fun &lt;T : ModuleDependency&gt; DependencyHandler.`archives`( dependency: T, dependencyConfiguration: T.() -&gt; Unit ): T</ID>
    <ID>FunctionNaming:ArchivesConfigurationAccessors.kt$@Deprecated(message = "The archives configuration has been deprecated for dependency declaration. Please use the 'implementation' or 'api' configuration instead.") internal fun DependencyConstraintHandler.`archives`(constraintNotation: Any): DependencyConstraint?</ID>
    <ID>FunctionNaming:ArchivesConfigurationAccessors.kt$@Deprecated(message = "The archives configuration has been deprecated for dependency declaration. Please use the 'implementation' or 'api' configuration instead.") internal fun DependencyConstraintHandler.`archives`(constraintNotation: Any, block: DependencyConstraint.() -&gt; Unit): DependencyConstraint?</ID>
    <ID>FunctionNaming:ArchivesConfigurationAccessors.kt$@Deprecated(message = "The archives configuration has been deprecated for dependency declaration. Please use the 'implementation' or 'api' configuration instead.") internal fun DependencyHandler.`archives`( dependencyNotation: Provider&lt;*&gt;, dependencyConfiguration: Action&lt;ExternalModuleDependency&gt; ): Unit</ID>
    <ID>FunctionNaming:ArchivesConfigurationAccessors.kt$@Deprecated(message = "The archives configuration has been deprecated for dependency declaration. Please use the 'implementation' or 'api' configuration instead.") internal fun DependencyHandler.`archives`( dependencyNotation: ProviderConvertible&lt;*&gt;, dependencyConfiguration: Action&lt;ExternalModuleDependency&gt; ): Unit</ID>
    <ID>FunctionNaming:ArchivesConfigurationAccessors.kt$@Deprecated(message = "The archives configuration has been deprecated for dependency declaration. Please use the 'implementation' or 'api' configuration instead.") internal fun DependencyHandler.`archives`( dependencyNotation: String, dependencyConfiguration: Action&lt;ExternalModuleDependency&gt; ): ExternalModuleDependency</ID>
    <ID>FunctionNaming:ArchivesConfigurationAccessors.kt$@Deprecated(message = "The archives configuration has been deprecated for dependency declaration. Please use the 'implementation' or 'api' configuration instead.") internal fun DependencyHandler.`archives`( group: String, name: String, version: String? = null, configuration: String? = null, classifier: String? = null, ext: String? = null, dependencyConfiguration: Action&lt;ExternalModuleDependency&gt;? = null ): ExternalModuleDependency</ID>
    <ID>FunctionNaming:ArchivesConfigurationAccessors.kt$@Deprecated(message = "The archives configuration has been deprecated for dependency declaration. Please use the 'implementation' or 'api' configuration instead.") internal fun DependencyHandler.`archives`(dependencyNotation: Any): Dependency?</ID>
    <ID>FunctionNaming:ArchivesConfigurationAccessors.kt$internal fun ArtifactHandler.`archives`( artifactNotation: Any, configureAction: ConfigurablePublishArtifact.() -&gt; Unit ): PublishArtifact</ID>
    <ID>FunctionNaming:ArchivesConfigurationAccessors.kt$internal fun ArtifactHandler.`archives`(artifactNotation: Any): PublishArtifact</ID>
    <ID>FunctionNaming:DefaultConfigurationAccessors.kt$@Deprecated(message = "The default configuration has been deprecated for dependency declaration. Please use the 'implementation' or 'api' configuration instead.") internal fun &lt;T : ModuleDependency&gt; DependencyHandler.`default`( dependency: T, dependencyConfiguration: T.() -&gt; Unit ): T</ID>
    <ID>FunctionNaming:DefaultConfigurationAccessors.kt$@Deprecated(message = "The default configuration has been deprecated for dependency declaration. Please use the 'implementation' or 'api' configuration instead.") internal fun DependencyConstraintHandler.`default`(constraintNotation: Any): DependencyConstraint?</ID>
    <ID>FunctionNaming:DefaultConfigurationAccessors.kt$@Deprecated(message = "The default configuration has been deprecated for dependency declaration. Please use the 'implementation' or 'api' configuration instead.") internal fun DependencyConstraintHandler.`default`(constraintNotation: Any, block: DependencyConstraint.() -&gt; Unit): DependencyConstraint?</ID>
    <ID>FunctionNaming:DefaultConfigurationAccessors.kt$@Deprecated(message = "The default configuration has been deprecated for dependency declaration. Please use the 'implementation' or 'api' configuration instead.") internal fun DependencyHandler.`default`( dependencyNotation: Provider&lt;*&gt;, dependencyConfiguration: Action&lt;ExternalModuleDependency&gt; ): Unit</ID>
    <ID>FunctionNaming:DefaultConfigurationAccessors.kt$@Deprecated(message = "The default configuration has been deprecated for dependency declaration. Please use the 'implementation' or 'api' configuration instead.") internal fun DependencyHandler.`default`( dependencyNotation: ProviderConvertible&lt;*&gt;, dependencyConfiguration: Action&lt;ExternalModuleDependency&gt; ): Unit</ID>
    <ID>FunctionNaming:DefaultConfigurationAccessors.kt$@Deprecated(message = "The default configuration has been deprecated for dependency declaration. Please use the 'implementation' or 'api' configuration instead.") internal fun DependencyHandler.`default`( dependencyNotation: String, dependencyConfiguration: Action&lt;ExternalModuleDependency&gt; ): ExternalModuleDependency</ID>
    <ID>FunctionNaming:DefaultConfigurationAccessors.kt$@Deprecated(message = "The default configuration has been deprecated for dependency declaration. Please use the 'implementation' or 'api' configuration instead.") internal fun DependencyHandler.`default`( group: String, name: String, version: String? = null, configuration: String? = null, classifier: String? = null, ext: String? = null, dependencyConfiguration: Action&lt;ExternalModuleDependency&gt;? = null ): ExternalModuleDependency</ID>
    <ID>FunctionNaming:DefaultConfigurationAccessors.kt$@Deprecated(message = "The default configuration has been deprecated for dependency declaration. Please use the 'implementation' or 'api' configuration instead.") internal fun DependencyHandler.`default`(dependencyNotation: Any): Dependency?</ID>
    <ID>FunctionNaming:DefaultConfigurationAccessors.kt$internal fun ArtifactHandler.`default`( artifactNotation: Any, configureAction: ConfigurablePublishArtifact.() -&gt; Unit ): PublishArtifact</ID>
    <ID>FunctionNaming:DefaultConfigurationAccessors.kt$internal fun ArtifactHandler.`default`(artifactNotation: Any): PublishArtifact</ID>
    <ID>MagicNumber:Dangerfile.df.kts$1000</ID>
    <ID>MagicNumber:Dangerfile.df.kts$20</ID>
    <ID>MagicNumber:Dangerfile.df.kts$2000</ID>
    <ID>MagicNumber:Dangerfile.df.kts$500</ID>
    <ID>MagicNumber:settings.gradle.kts$30</ID>
    <ID>MaxLineLength:Accessors20m89wvqrtvolhrxzuq1utrar.kt$val</ID>
    <ID>MaxLineLength:Accessors33qjl5yednlyp9tyvd6yykvt5.kt$(this as org.gradle.api.plugins.ExtensionAware).extensions.getByName("ext") as org.gradle.api.plugins.ExtraPropertiesExtension</ID>
    <ID>MaxLineLength:Accessors33qjl5yednlyp9tyvd6yykvt5.kt$fun</ID>
    <ID>MaxLineLength:Accessors365te60wp7h43wszbvbl7a76x.kt$(this as org.gradle.api.plugins.ExtensionAware).extensions.getByName("spotless") as com.diffplug.gradle.spotless.SpotlessExtension</ID>
    <ID>MaxLineLength:Accessors3lkj8uvuyc1fes1zjdaceqluw.kt$(this as org.gradle.api.plugins.ExtensionAware).extensions.getByName("ext") as org.gradle.api.plugins.ExtraPropertiesExtension</ID>
    <ID>MaxLineLength:Accessors3lkj8uvuyc1fes1zjdaceqluw.kt$fun</ID>
    <ID>MaxLineLength:Accessors3lkj8uvuyc1fes1zjdaceqluw.kt$val</ID>
    <ID>MaxLineLength:Accessors46nwrg1rs44ofdqpi7vyy3pfc.kt$(this as org.gradle.api.plugins.ExtensionAware).extensions.getByName("ext") as org.gradle.api.plugins.ExtraPropertiesExtension</ID>
    <ID>MaxLineLength:Accessors46nwrg1rs44ofdqpi7vyy3pfc.kt$fun</ID>
    <ID>MaxLineLength:Accessors4cq6for70h038yxssph9k42o3.kt$val</ID>
    <ID>MaxLineLength:Accessors5r7od1ls1rcal14bwiw1aolf3.kt$val</ID>
    <ID>MaxLineLength:Accessors8lcri9ibgd9oj8dt3t8z8nvfx.kt$(this as org.gradle.api.plugins.ExtensionAware).extensions.getByName("ext") as org.gradle.api.plugins.ExtraPropertiesExtension</ID>
    <ID>MaxLineLength:Accessors8lcri9ibgd9oj8dt3t8z8nvfx.kt$fun</ID>
    <ID>MaxLineLength:Accessors9ofjxssccbksmuzem03z8pl6.kt$(this as org.gradle.api.plugins.ExtensionAware).extensions.getByName("base") as org.gradle.api.plugins.BasePluginExtension</ID>
    <ID>MaxLineLength:Accessorsaofthkmarv0q41bodk71vcqi7.kt$(this as org.gradle.api.plugins.ExtensionAware).extensions.getByName("defaultArtifacts") as org.gradle.api.internal.plugins.DefaultArtifactPublicationSet</ID>
    <ID>MaxLineLength:Accessorsaofthkmarv0q41bodk71vcqi7.kt$fun</ID>
    <ID>MaxLineLength:Accessorsblypoh2ruc9u3bx9djsfqsntg.kt$(this as org.gradle.api.plugins.ExtensionAware).extensions.getByName("ext") as org.gradle.api.plugins.ExtraPropertiesExtension</ID>
    <ID>MaxLineLength:Accessorsed7e04c18w9g7176u3w1ie44j.kt$(this as org.gradle.api.plugins.ExtensionAware).extensions.getByName("ext") as org.gradle.api.plugins.ExtraPropertiesExtension</ID>
    <ID>MaxLineLength:Accessorsed7e04c18w9g7176u3w1ie44j.kt$fun</ID>
    <ID>MaxLineLength:ArchivesConfigurationAccessors.kt$@Deprecated(message = "The archives configuration has been deprecated for dependency declaration. Please use the 'implementation' or 'api' configuration instead.")</ID>
    <ID>MaxLineLength:ArchivesConfigurationAccessors.kt$fun</ID>
    <ID>MaxLineLength:Dangerfile.df.kts$val</ID>
    <ID>MaxLineLength:DefaultConfigurationAccessors.kt$@Deprecated(message = "The default configuration has been deprecated for dependency declaration. Please use the 'implementation' or 'api' configuration instead.")</ID>
    <ID>MaxLineLength:DefaultConfigurationAccessors.kt$fun</ID>
    <ID>MaxLineLength:GradlePlugin.kt$GradlePlugin$const val runtimeConfig = "tech.antibytes.gradle-plugins:antibytes-runtime-configuration:${Version.gradle.antibytes}"</ID>
    <ID>MaxLineLength:build.gradle.kts$config = files("$projectDir/detekt/config.yml")</ID>
    <ID>NewLineAtEndOfFile:quality-spotless.gradle.kts$tech.antibytes.gradle.ktname.script.quality-spotless.gradle.kts</ID>
    <ID>PackageNaming:Accessors16h8i8yvcoyu6adqodek0vazl.kt$package gradle.kotlin.dsl.accessors._01a7fddcf81aa279b379d6fe3cb64505</ID>
    <ID>PackageNaming:Accessors1rjydc5cf7y0f6xd8ou20m2o4.kt$package gradle.kotlin.dsl.accessors._01a7fddcf81aa279b379d6fe3cb64505</ID>
    <ID>PackageNaming:Accessors20m89wvqrtvolhrxzuq1utrar.kt$package gradle.kotlin.dsl.accessors._01a7fddcf81aa279b379d6fe3cb64505</ID>
    <ID>PackageNaming:Accessors2ccw5a3jr4u6s0w7on61o6me9.kt$package gradle.kotlin.dsl.accessors._01a7fddcf81aa279b379d6fe3cb64505</ID>
    <ID>PackageNaming:Accessors2s1m7qhtdel2iy5x5gc2gv6f5.kt$package gradle.kotlin.dsl.accessors._01a7fddcf81aa279b379d6fe3cb64505</ID>
    <ID>PackageNaming:Accessors33qjl5yednlyp9tyvd6yykvt5.kt$package gradle.kotlin.dsl.accessors._01a7fddcf81aa279b379d6fe3cb64505</ID>
    <ID>PackageNaming:Accessors365te60wp7h43wszbvbl7a76x.kt$package gradle.kotlin.dsl.accessors._01a7fddcf81aa279b379d6fe3cb64505</ID>
    <ID>PackageNaming:Accessors3lkj8uvuyc1fes1zjdaceqluw.kt$package gradle.kotlin.dsl.accessors._01a7fddcf81aa279b379d6fe3cb64505</ID>
    <ID>PackageNaming:Accessors46nwrg1rs44ofdqpi7vyy3pfc.kt$package gradle.kotlin.dsl.accessors._01a7fddcf81aa279b379d6fe3cb64505</ID>
    <ID>PackageNaming:Accessors4cq6for70h038yxssph9k42o3.kt$package gradle.kotlin.dsl.accessors._01a7fddcf81aa279b379d6fe3cb64505</ID>
    <ID>PackageNaming:Accessors5cx8iclyvbivcabq86i8mlot5.kt$package gradle.kotlin.dsl.accessors._01a7fddcf81aa279b379d6fe3cb64505</ID>
    <ID>PackageNaming:Accessors5r7od1ls1rcal14bwiw1aolf3.kt$package gradle.kotlin.dsl.accessors._01a7fddcf81aa279b379d6fe3cb64505</ID>
    <ID>PackageNaming:Accessors8lcri9ibgd9oj8dt3t8z8nvfx.kt$package gradle.kotlin.dsl.accessors._01a7fddcf81aa279b379d6fe3cb64505</ID>
    <ID>PackageNaming:Accessors9ofjxssccbksmuzem03z8pl6.kt$package gradle.kotlin.dsl.accessors._01a7fddcf81aa279b379d6fe3cb64505</ID>
    <ID>PackageNaming:Accessors9xbdx9ypglb5iceqwefq3l2u.kt$package gradle.kotlin.dsl.accessors._01a7fddcf81aa279b379d6fe3cb64505</ID>
    <ID>PackageNaming:Accessorsaofthkmarv0q41bodk71vcqi7.kt$package gradle.kotlin.dsl.accessors._01a7fddcf81aa279b379d6fe3cb64505</ID>
    <ID>PackageNaming:Accessorsblypoh2ruc9u3bx9djsfqsntg.kt$package gradle.kotlin.dsl.accessors._01a7fddcf81aa279b379d6fe3cb64505</ID>
    <ID>PackageNaming:Accessorse1rkywyln7kgzh4axk281mwcq.kt$package gradle.kotlin.dsl.accessors._01a7fddcf81aa279b379d6fe3cb64505</ID>
    <ID>PackageNaming:Accessorsed7e04c18w9g7176u3w1ie44j.kt$package gradle.kotlin.dsl.accessors._01a7fddcf81aa279b379d6fe3cb64505</ID>
    <ID>PackageNaming:ArchivesConfigurationAccessors.kt$package gradle.kotlin.dsl.accessors._01a7fddcf81aa279b379d6fe3cb64505</ID>
    <ID>PackageNaming:DefaultConfigurationAccessors.kt$package gradle.kotlin.dsl.accessors._01a7fddcf81aa279b379d6fe3cb64505</ID>
    <ID>PackageNaming:PluginSpecBuilders.kt$package gradle.kotlin.dsl.plugins._c7fb1427da39b554bf68a8d201755f9b</ID>
    <ID>SwallowedException:QualitySpotlessPlugin.kt$QualitySpotlessPlugin$e: java.lang.reflect.InvocationTargetException</ID>
    <ID>TopLevelPropertyNaming:Accessors16h8i8yvcoyu6adqodek0vazl.kt$/** * Provides the existing [build][org.gradle.api.DefaultTask] task. */ internal val TaskContainer.`build`: TaskProvider&lt;org.gradle.api.DefaultTask&gt; get() = named&lt;org.gradle.api.DefaultTask&gt;("build")</ID>
    <ID>TopLevelPropertyNaming:Accessors1rjydc5cf7y0f6xd8ou20m2o4.kt$/** * Provides the existing [spotlessDiagnose][org.gradle.api.DefaultTask] task. */ internal val TaskContainer.`spotlessDiagnose`: TaskProvider&lt;org.gradle.api.DefaultTask&gt; get() = named&lt;org.gradle.api.DefaultTask&gt;("spotlessDiagnose")</ID>
    <ID>TopLevelPropertyNaming:Accessors20m89wvqrtvolhrxzuq1utrar.kt$/** * Provides the existing [archives][org.gradle.api.artifacts.Configuration] element. */ internal val org.gradle.api.NamedDomainObjectContainer&lt;org.gradle.api.artifacts.Configuration&gt;.`archives`: NamedDomainObjectProvider&lt;org.gradle.api.artifacts.Configuration&gt; get() = named&lt;org.gradle.api.artifacts.Configuration&gt;("archives")</ID>
    <ID>TopLevelPropertyNaming:Accessors2ccw5a3jr4u6s0w7on61o6me9.kt$/** * Provides the existing [spotlessCheck][org.gradle.api.DefaultTask] task. */ internal val TaskContainer.`spotlessCheck`: TaskProvider&lt;org.gradle.api.DefaultTask&gt; get() = named&lt;org.gradle.api.DefaultTask&gt;("spotlessCheck")</ID>
    <ID>TopLevelPropertyNaming:Accessors2s1m7qhtdel2iy5x5gc2gv6f5.kt$/** * Provides the existing [check][org.gradle.api.DefaultTask] task. */ internal val TaskContainer.`check`: TaskProvider&lt;org.gradle.api.DefaultTask&gt; get() = named&lt;org.gradle.api.DefaultTask&gt;("check")</ID>
    <ID>TopLevelPropertyNaming:Accessors33qjl5yednlyp9tyvd6yykvt5.kt$/** * Retrieves the [ext][org.gradle.api.plugins.ExtraPropertiesExtension] extension. */ internal val org.gradle.api.plugins.BasePluginExtension.`ext`: org.gradle.api.plugins.ExtraPropertiesExtension get() = (this as org.gradle.api.plugins.ExtensionAware).extensions.getByName("ext") as org.gradle.api.plugins.ExtraPropertiesExtension</ID>
    <ID>TopLevelPropertyNaming:Accessors365te60wp7h43wszbvbl7a76x.kt$/** * Retrieves the [spotless][com.diffplug.gradle.spotless.SpotlessExtension] extension. */ internal val org.gradle.api.Project.`spotless`: com.diffplug.gradle.spotless.SpotlessExtension get() = (this as org.gradle.api.plugins.ExtensionAware).extensions.getByName("spotless") as com.diffplug.gradle.spotless.SpotlessExtension</ID>
    <ID>TopLevelPropertyNaming:Accessors3lkj8uvuyc1fes1zjdaceqluw.kt$/** * Retrieves the [ext][org.gradle.api.plugins.ExtraPropertiesExtension] extension. */ internal val org.gradle.api.internal.plugins.DefaultArtifactPublicationSet.`ext`: org.gradle.api.plugins.ExtraPropertiesExtension get() = (this as org.gradle.api.plugins.ExtensionAware).extensions.getByName("ext") as org.gradle.api.plugins.ExtraPropertiesExtension</ID>
    <ID>TopLevelPropertyNaming:Accessors46nwrg1rs44ofdqpi7vyy3pfc.kt$/** * Retrieves the [ext][org.gradle.api.plugins.ExtraPropertiesExtension] extension. */ internal val org.gradle.api.artifacts.dsl.RepositoryHandler.`ext`: org.gradle.api.plugins.ExtraPropertiesExtension get() = (this as org.gradle.api.plugins.ExtensionAware).extensions.getByName("ext") as org.gradle.api.plugins.ExtraPropertiesExtension</ID>
    <ID>TopLevelPropertyNaming:Accessors4cq6for70h038yxssph9k42o3.kt$/** * Provides the existing [spotlessInternalRegisterDependencies][com.diffplug.gradle.spotless.RegisterDependenciesTask] task. */ internal val TaskContainer.`spotlessInternalRegisterDependencies`: TaskProvider&lt;com.diffplug.gradle.spotless.RegisterDependenciesTask&gt; get() = named&lt;com.diffplug.gradle.spotless.RegisterDependenciesTask&gt;("spotlessInternalRegisterDependencies")</ID>
    <ID>TopLevelPropertyNaming:Accessors5cx8iclyvbivcabq86i8mlot5.kt$/** * Provides the existing [assemble][org.gradle.api.DefaultTask] task. */ internal val TaskContainer.`assemble`: TaskProvider&lt;org.gradle.api.DefaultTask&gt; get() = named&lt;org.gradle.api.DefaultTask&gt;("assemble")</ID>
    <ID>TopLevelPropertyNaming:Accessors5r7od1ls1rcal14bwiw1aolf3.kt$/** * Provides the existing [default][org.gradle.api.artifacts.Configuration] element. */ internal val org.gradle.api.NamedDomainObjectContainer&lt;org.gradle.api.artifacts.Configuration&gt;.`default`: NamedDomainObjectProvider&lt;org.gradle.api.artifacts.Configuration&gt; get() = named&lt;org.gradle.api.artifacts.Configuration&gt;("default")</ID>
    <ID>TopLevelPropertyNaming:Accessors8lcri9ibgd9oj8dt3t8z8nvfx.kt$/** * Retrieves the [ext][org.gradle.api.plugins.ExtraPropertiesExtension] extension. */ internal val org.gradle.api.artifacts.dsl.DependencyHandler.`ext`: org.gradle.api.plugins.ExtraPropertiesExtension get() = (this as org.gradle.api.plugins.ExtensionAware).extensions.getByName("ext") as org.gradle.api.plugins.ExtraPropertiesExtension</ID>
    <ID>TopLevelPropertyNaming:Accessors9ofjxssccbksmuzem03z8pl6.kt$/** * Retrieves the [base][org.gradle.api.plugins.BasePluginExtension] extension. */ internal val org.gradle.api.Project.`base`: org.gradle.api.plugins.BasePluginExtension get() = (this as org.gradle.api.plugins.ExtensionAware).extensions.getByName("base") as org.gradle.api.plugins.BasePluginExtension</ID>
    <ID>TopLevelPropertyNaming:Accessors9xbdx9ypglb5iceqwefq3l2u.kt$/** * Provides the existing [clean][org.gradle.api.tasks.Delete] task. */ internal val TaskContainer.`clean`: TaskProvider&lt;org.gradle.api.tasks.Delete&gt; get() = named&lt;org.gradle.api.tasks.Delete&gt;("clean")</ID>
    <ID>TopLevelPropertyNaming:Accessorsaofthkmarv0q41bodk71vcqi7.kt$/** * Retrieves the [defaultArtifacts][org.gradle.api.internal.plugins.DefaultArtifactPublicationSet] extension. */ internal val org.gradle.api.Project.`defaultArtifacts`: org.gradle.api.internal.plugins.DefaultArtifactPublicationSet get() = (this as org.gradle.api.plugins.ExtensionAware).extensions.getByName("defaultArtifacts") as org.gradle.api.internal.plugins.DefaultArtifactPublicationSet</ID>
    <ID>TopLevelPropertyNaming:Accessorsblypoh2ruc9u3bx9djsfqsntg.kt$/** * Retrieves the [ext][org.gradle.api.plugins.ExtraPropertiesExtension] extension. */ internal val org.gradle.api.Project.`ext`: org.gradle.api.plugins.ExtraPropertiesExtension get() = (this as org.gradle.api.plugins.ExtensionAware).extensions.getByName("ext") as org.gradle.api.plugins.ExtraPropertiesExtension</ID>
    <ID>TopLevelPropertyNaming:Accessorse1rkywyln7kgzh4axk281mwcq.kt$/** * Provides the existing [spotlessApply][org.gradle.api.DefaultTask] task. */ internal val TaskContainer.`spotlessApply`: TaskProvider&lt;org.gradle.api.DefaultTask&gt; get() = named&lt;org.gradle.api.DefaultTask&gt;("spotlessApply")</ID>
    <ID>TopLevelPropertyNaming:Accessorsed7e04c18w9g7176u3w1ie44j.kt$/** * Retrieves the [ext][org.gradle.api.plugins.ExtraPropertiesExtension] extension. */ internal val com.diffplug.gradle.spotless.SpotlessExtension.`ext`: org.gradle.api.plugins.ExtraPropertiesExtension get() = (this as org.gradle.api.plugins.ExtensionAware).extensions.getByName("ext") as org.gradle.api.plugins.ExtraPropertiesExtension</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * Plugin ids starting with `com.diffplug.gradle`. */ internal val `ComDiffplugPluginGroup`.`gradle`: `ComDiffplugGradlePluginGroup` get() = `ComDiffplugGradlePluginGroup`(plugins)</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * Plugin ids starting with `com.diffplug`. */ internal val `ComPluginGroup`.`diffplug`: `ComDiffplugPluginGroup` get() = `ComDiffplugPluginGroup`(plugins)</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * Plugin ids starting with `com`. */ internal val `PluginDependenciesSpec`.`com`: `ComPluginGroup` get() = `ComPluginGroup`(this)</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * Plugin ids starting with `org.gradle`. */ internal val `OrgPluginGroup`.`gradle`: `OrgGradlePluginGroup` get() = `OrgGradlePluginGroup`(plugins)</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * Plugin ids starting with `org`. */ internal val `PluginDependenciesSpec`.`org`: `OrgPluginGroup` get() = `OrgPluginGroup`(this)</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * Plugin ids starting with `tech.antibytes.gradle`. */ internal val `TechAntibytesPluginGroup`.`gradle`: `TechAntibytesGradlePluginGroup` get() = `TechAntibytesGradlePluginGroup`(plugins)</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * Plugin ids starting with `tech.antibytes`. */ internal val `TechPluginGroup`.`antibytes`: `TechAntibytesPluginGroup` get() = `TechAntibytesPluginGroup`(plugins)</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * Plugin ids starting with `tech`. */ internal val `PluginDependenciesSpec`.`tech`: `TechPluginGroup` get() = `TechPluginGroup`(this)</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `com.diffplug.gradle.spotless` plugin implemented by [com.diffplug.gradle.spotless.SpotlessPluginRedirect]. */ internal val `ComDiffplugGradlePluginGroup`.`spotless`: PluginDependencySpec get() = plugins.id("com.diffplug.gradle.spotless")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `com.diffplug.spotless` plugin implemented by [com.diffplug.gradle.spotless.SpotlessPlugin]. */ internal val `ComDiffplugPluginGroup`.`spotless`: PluginDependencySpec get() = plugins.id("com.diffplug.spotless")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.antlr` plugin implemented by [org.gradle.api.plugins.antlr.AntlrPlugin]. */ internal val `OrgGradlePluginGroup`.`antlr`: PluginDependencySpec get() = plugins.id("org.gradle.antlr")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.application` plugin implemented by [org.gradle.api.plugins.ApplicationPlugin]. */ internal val `OrgGradlePluginGroup`.`application`: PluginDependencySpec get() = plugins.id("org.gradle.application")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.assembler-lang` plugin implemented by [org.gradle.language.assembler.plugins.AssemblerLangPlugin]. */ internal val `OrgGradlePluginGroup`.`assembler-lang`: PluginDependencySpec get() = plugins.id("org.gradle.assembler-lang")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.assembler` plugin implemented by [org.gradle.language.assembler.plugins.AssemblerPlugin]. */ internal val `OrgGradlePluginGroup`.`assembler`: PluginDependencySpec get() = plugins.id("org.gradle.assembler")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.base` plugin implemented by [org.gradle.api.plugins.BasePlugin]. */ internal val `OrgGradlePluginGroup`.`base`: PluginDependencySpec get() = plugins.id("org.gradle.base")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.binary-base` plugin implemented by [org.gradle.platform.base.plugins.BinaryBasePlugin]. */ internal val `OrgGradlePluginGroup`.`binary-base`: PluginDependencySpec get() = plugins.id("org.gradle.binary-base")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.build-dashboard` plugin implemented by [org.gradle.api.reporting.plugins.BuildDashboardPlugin]. */ internal val `OrgGradlePluginGroup`.`build-dashboard`: PluginDependencySpec get() = plugins.id("org.gradle.build-dashboard")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.build-init` plugin implemented by [org.gradle.buildinit.plugins.BuildInitPlugin]. */ internal val `OrgGradlePluginGroup`.`build-init`: PluginDependencySpec get() = plugins.id("org.gradle.build-init")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.c-lang` plugin implemented by [org.gradle.language.c.plugins.CLangPlugin]. */ internal val `OrgGradlePluginGroup`.`c-lang`: PluginDependencySpec get() = plugins.id("org.gradle.c-lang")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.c` plugin implemented by [org.gradle.language.c.plugins.CPlugin]. */ internal val `OrgGradlePluginGroup`.`c`: PluginDependencySpec get() = plugins.id("org.gradle.c")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.checkstyle` plugin implemented by [org.gradle.api.plugins.quality.CheckstylePlugin]. */ internal val `OrgGradlePluginGroup`.`checkstyle`: PluginDependencySpec get() = plugins.id("org.gradle.checkstyle")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.clang-compiler` plugin implemented by [org.gradle.nativeplatform.toolchain.plugins.ClangCompilerPlugin]. */ internal val `OrgGradlePluginGroup`.`clang-compiler`: PluginDependencySpec get() = plugins.id("org.gradle.clang-compiler")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.codenarc` plugin implemented by [org.gradle.api.plugins.quality.CodeNarcPlugin]. */ internal val `OrgGradlePluginGroup`.`codenarc`: PluginDependencySpec get() = plugins.id("org.gradle.codenarc")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.component-base` plugin implemented by [org.gradle.platform.base.plugins.ComponentBasePlugin]. */ internal val `OrgGradlePluginGroup`.`component-base`: PluginDependencySpec get() = plugins.id("org.gradle.component-base")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.component-model-base` plugin implemented by [org.gradle.language.base.plugins.ComponentModelBasePlugin]. */ internal val `OrgGradlePluginGroup`.`component-model-base`: PluginDependencySpec get() = plugins.id("org.gradle.component-model-base")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.cpp-application` plugin implemented by [org.gradle.language.cpp.plugins.CppApplicationPlugin]. */ internal val `OrgGradlePluginGroup`.`cpp-application`: PluginDependencySpec get() = plugins.id("org.gradle.cpp-application")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.cpp-lang` plugin implemented by [org.gradle.language.cpp.plugins.CppLangPlugin]. */ internal val `OrgGradlePluginGroup`.`cpp-lang`: PluginDependencySpec get() = plugins.id("org.gradle.cpp-lang")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.cpp-library` plugin implemented by [org.gradle.language.cpp.plugins.CppLibraryPlugin]. */ internal val `OrgGradlePluginGroup`.`cpp-library`: PluginDependencySpec get() = plugins.id("org.gradle.cpp-library")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.cpp-unit-test` plugin implemented by [org.gradle.nativeplatform.test.cpp.plugins.CppUnitTestPlugin]. */ internal val `OrgGradlePluginGroup`.`cpp-unit-test`: PluginDependencySpec get() = plugins.id("org.gradle.cpp-unit-test")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.cpp` plugin implemented by [org.gradle.language.cpp.plugins.CppPlugin]. */ internal val `OrgGradlePluginGroup`.`cpp`: PluginDependencySpec get() = plugins.id("org.gradle.cpp")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.cunit-test-suite` plugin implemented by [org.gradle.nativeplatform.test.cunit.plugins.CUnitPlugin]. */ internal val `OrgGradlePluginGroup`.`cunit-test-suite`: PluginDependencySpec get() = plugins.id("org.gradle.cunit-test-suite")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.cunit` plugin implemented by [org.gradle.nativeplatform.test.cunit.plugins.CUnitConventionPlugin]. */ internal val `OrgGradlePluginGroup`.`cunit`: PluginDependencySpec get() = plugins.id("org.gradle.cunit")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.distribution` plugin implemented by [org.gradle.api.distribution.plugins.DistributionPlugin]. */ internal val `OrgGradlePluginGroup`.`distribution`: PluginDependencySpec get() = plugins.id("org.gradle.distribution")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.ear` plugin implemented by [org.gradle.plugins.ear.EarPlugin]. */ internal val `OrgGradlePluginGroup`.`ear`: PluginDependencySpec get() = plugins.id("org.gradle.ear")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.eclipse-wtp` plugin implemented by [org.gradle.plugins.ide.eclipse.EclipseWtpPlugin]. */ internal val `OrgGradlePluginGroup`.`eclipse-wtp`: PluginDependencySpec get() = plugins.id("org.gradle.eclipse-wtp")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.eclipse` plugin implemented by [org.gradle.plugins.ide.eclipse.EclipsePlugin]. */ internal val `OrgGradlePluginGroup`.`eclipse`: PluginDependencySpec get() = plugins.id("org.gradle.eclipse")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.gcc-compiler` plugin implemented by [org.gradle.nativeplatform.toolchain.plugins.GccCompilerPlugin]. */ internal val `OrgGradlePluginGroup`.`gcc-compiler`: PluginDependencySpec get() = plugins.id("org.gradle.gcc-compiler")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.google-test-test-suite` plugin implemented by [org.gradle.nativeplatform.test.googletest.plugins.GoogleTestPlugin]. */ internal val `OrgGradlePluginGroup`.`google-test-test-suite`: PluginDependencySpec get() = plugins.id("org.gradle.google-test-test-suite")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.google-test` plugin implemented by [org.gradle.nativeplatform.test.googletest.plugins.GoogleTestConventionPlugin]. */ internal val `OrgGradlePluginGroup`.`google-test`: PluginDependencySpec get() = plugins.id("org.gradle.google-test")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.groovy-base` plugin implemented by [org.gradle.api.plugins.GroovyBasePlugin]. */ internal val `OrgGradlePluginGroup`.`groovy-base`: PluginDependencySpec get() = plugins.id("org.gradle.groovy-base")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.groovy-gradle-plugin` plugin implemented by [org.gradle.plugin.devel.internal.precompiled.PrecompiledGroovyPluginsPlugin]. */ internal val `OrgGradlePluginGroup`.`groovy-gradle-plugin`: PluginDependencySpec get() = plugins.id("org.gradle.groovy-gradle-plugin")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.groovy` plugin implemented by [org.gradle.api.plugins.GroovyPlugin]. */ internal val `OrgGradlePluginGroup`.`groovy`: PluginDependencySpec get() = plugins.id("org.gradle.groovy")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.help-tasks` plugin implemented by [org.gradle.api.plugins.HelpTasksPlugin]. */ internal val `OrgGradlePluginGroup`.`help-tasks`: PluginDependencySpec get() = plugins.id("org.gradle.help-tasks")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.idea` plugin implemented by [org.gradle.plugins.ide.idea.IdeaPlugin]. */ internal val `OrgGradlePluginGroup`.`idea`: PluginDependencySpec get() = plugins.id("org.gradle.idea")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.ivy-publish` plugin implemented by [org.gradle.api.publish.ivy.plugins.IvyPublishPlugin]. */ internal val `OrgGradlePluginGroup`.`ivy-publish`: PluginDependencySpec get() = plugins.id("org.gradle.ivy-publish")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.jacoco-report-aggregation` plugin implemented by [org.gradle.testing.jacoco.plugins.JacocoReportAggregationPlugin]. */ internal val `OrgGradlePluginGroup`.`jacoco-report-aggregation`: PluginDependencySpec get() = plugins.id("org.gradle.jacoco-report-aggregation")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.jacoco` plugin implemented by [org.gradle.testing.jacoco.plugins.JacocoPlugin]. */ internal val `OrgGradlePluginGroup`.`jacoco`: PluginDependencySpec get() = plugins.id("org.gradle.jacoco")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.java-base` plugin implemented by [org.gradle.api.plugins.JavaBasePlugin]. */ internal val `OrgGradlePluginGroup`.`java-base`: PluginDependencySpec get() = plugins.id("org.gradle.java-base")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.java-gradle-plugin` plugin implemented by [org.gradle.plugin.devel.plugins.JavaGradlePluginPlugin]. */ internal val `OrgGradlePluginGroup`.`java-gradle-plugin`: PluginDependencySpec get() = plugins.id("org.gradle.java-gradle-plugin")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.java-library-distribution` plugin implemented by [org.gradle.api.plugins.JavaLibraryDistributionPlugin]. */ internal val `OrgGradlePluginGroup`.`java-library-distribution`: PluginDependencySpec get() = plugins.id("org.gradle.java-library-distribution")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.java-library` plugin implemented by [org.gradle.api.plugins.JavaLibraryPlugin]. */ internal val `OrgGradlePluginGroup`.`java-library`: PluginDependencySpec get() = plugins.id("org.gradle.java-library")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.java-platform` plugin implemented by [org.gradle.api.plugins.JavaPlatformPlugin]. */ internal val `OrgGradlePluginGroup`.`java-platform`: PluginDependencySpec get() = plugins.id("org.gradle.java-platform")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.java-test-fixtures` plugin implemented by [org.gradle.api.plugins.JavaTestFixturesPlugin]. */ internal val `OrgGradlePluginGroup`.`java-test-fixtures`: PluginDependencySpec get() = plugins.id("org.gradle.java-test-fixtures")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.java` plugin implemented by [org.gradle.api.plugins.JavaPlugin]. */ internal val `OrgGradlePluginGroup`.`java`: PluginDependencySpec get() = plugins.id("org.gradle.java")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.jvm-ecosystem` plugin implemented by [org.gradle.api.plugins.JvmEcosystemPlugin]. */ internal val `OrgGradlePluginGroup`.`jvm-ecosystem`: PluginDependencySpec get() = plugins.id("org.gradle.jvm-ecosystem")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.jvm-test-suite` plugin implemented by [org.gradle.api.plugins.JvmTestSuitePlugin]. */ internal val `OrgGradlePluginGroup`.`jvm-test-suite`: PluginDependencySpec get() = plugins.id("org.gradle.jvm-test-suite")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.language-base` plugin implemented by [org.gradle.language.base.plugins.LanguageBasePlugin]. */ internal val `OrgGradlePluginGroup`.`language-base`: PluginDependencySpec get() = plugins.id("org.gradle.language-base")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.lifecycle-base` plugin implemented by [org.gradle.language.base.plugins.LifecycleBasePlugin]. */ internal val `OrgGradlePluginGroup`.`lifecycle-base`: PluginDependencySpec get() = plugins.id("org.gradle.lifecycle-base")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.maven-publish` plugin implemented by [org.gradle.api.publish.maven.plugins.MavenPublishPlugin]. */ internal val `OrgGradlePluginGroup`.`maven-publish`: PluginDependencySpec get() = plugins.id("org.gradle.maven-publish")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.microsoft-visual-cpp-compiler` plugin implemented by [org.gradle.nativeplatform.toolchain.plugins.MicrosoftVisualCppCompilerPlugin]. */ internal val `OrgGradlePluginGroup`.`microsoft-visual-cpp-compiler`: PluginDependencySpec get() = plugins.id("org.gradle.microsoft-visual-cpp-compiler")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.native-component-model` plugin implemented by [org.gradle.nativeplatform.plugins.NativeComponentModelPlugin]. */ internal val `OrgGradlePluginGroup`.`native-component-model`: PluginDependencySpec get() = plugins.id("org.gradle.native-component-model")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.native-component` plugin implemented by [org.gradle.nativeplatform.plugins.NativeComponentPlugin]. */ internal val `OrgGradlePluginGroup`.`native-component`: PluginDependencySpec get() = plugins.id("org.gradle.native-component")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.objective-c-lang` plugin implemented by [org.gradle.language.objectivec.plugins.ObjectiveCLangPlugin]. */ internal val `OrgGradlePluginGroup`.`objective-c-lang`: PluginDependencySpec get() = plugins.id("org.gradle.objective-c-lang")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.objective-c` plugin implemented by [org.gradle.language.objectivec.plugins.ObjectiveCPlugin]. */ internal val `OrgGradlePluginGroup`.`objective-c`: PluginDependencySpec get() = plugins.id("org.gradle.objective-c")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.objective-cpp-lang` plugin implemented by [org.gradle.language.objectivecpp.plugins.ObjectiveCppLangPlugin]. */ internal val `OrgGradlePluginGroup`.`objective-cpp-lang`: PluginDependencySpec get() = plugins.id("org.gradle.objective-cpp-lang")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.objective-cpp` plugin implemented by [org.gradle.language.objectivecpp.plugins.ObjectiveCppPlugin]. */ internal val `OrgGradlePluginGroup`.`objective-cpp`: PluginDependencySpec get() = plugins.id("org.gradle.objective-cpp")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.pmd` plugin implemented by [org.gradle.api.plugins.quality.PmdPlugin]. */ internal val `OrgGradlePluginGroup`.`pmd`: PluginDependencySpec get() = plugins.id("org.gradle.pmd")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.project-report` plugin implemented by [org.gradle.api.plugins.ProjectReportsPlugin]. */ internal val `OrgGradlePluginGroup`.`project-report`: PluginDependencySpec get() = plugins.id("org.gradle.project-report")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.project-reports` plugin implemented by [org.gradle.api.plugins.ProjectReportsPlugin]. */ internal val `OrgGradlePluginGroup`.`project-reports`: PluginDependencySpec get() = plugins.id("org.gradle.project-reports")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.publishing` plugin implemented by [org.gradle.api.publish.plugins.PublishingPlugin]. */ internal val `OrgGradlePluginGroup`.`publishing`: PluginDependencySpec get() = plugins.id("org.gradle.publishing")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.reporting-base` plugin implemented by [org.gradle.api.plugins.ReportingBasePlugin]. */ internal val `OrgGradlePluginGroup`.`reporting-base`: PluginDependencySpec get() = plugins.id("org.gradle.reporting-base")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.scala-base` plugin implemented by [org.gradle.api.plugins.scala.ScalaBasePlugin]. */ internal val `OrgGradlePluginGroup`.`scala-base`: PluginDependencySpec get() = plugins.id("org.gradle.scala-base")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.scala` plugin implemented by [org.gradle.api.plugins.scala.ScalaPlugin]. */ internal val `OrgGradlePluginGroup`.`scala`: PluginDependencySpec get() = plugins.id("org.gradle.scala")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.signing` plugin implemented by [org.gradle.plugins.signing.SigningPlugin]. */ internal val `OrgGradlePluginGroup`.`signing`: PluginDependencySpec get() = plugins.id("org.gradle.signing")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.standard-tool-chains` plugin implemented by [org.gradle.nativeplatform.toolchain.internal.plugins.StandardToolChainsPlugin]. */ internal val `OrgGradlePluginGroup`.`standard-tool-chains`: PluginDependencySpec get() = plugins.id("org.gradle.standard-tool-chains")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.swift-application` plugin implemented by [org.gradle.language.swift.plugins.SwiftApplicationPlugin]. */ internal val `OrgGradlePluginGroup`.`swift-application`: PluginDependencySpec get() = plugins.id("org.gradle.swift-application")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.swift-library` plugin implemented by [org.gradle.language.swift.plugins.SwiftLibraryPlugin]. */ internal val `OrgGradlePluginGroup`.`swift-library`: PluginDependencySpec get() = plugins.id("org.gradle.swift-library")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.swiftpm-export` plugin implemented by [org.gradle.swiftpm.plugins.SwiftPackageManagerExportPlugin]. */ internal val `OrgGradlePluginGroup`.`swiftpm-export`: PluginDependencySpec get() = plugins.id("org.gradle.swiftpm-export")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.test-report-aggregation` plugin implemented by [org.gradle.api.plugins.TestReportAggregationPlugin]. */ internal val `OrgGradlePluginGroup`.`test-report-aggregation`: PluginDependencySpec get() = plugins.id("org.gradle.test-report-aggregation")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.test-suite-base` plugin implemented by [org.gradle.testing.base.plugins.TestSuiteBasePlugin]. */ internal val `OrgGradlePluginGroup`.`test-suite-base`: PluginDependencySpec get() = plugins.id("org.gradle.test-suite-base")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.validate-external-gradle-plugin` plugin implemented by [org.gradle.plugin.devel.plugins.ExternalPluginValidationPlugin]. */ internal val `OrgGradlePluginGroup`.`validate-external-gradle-plugin`: PluginDependencySpec get() = plugins.id("org.gradle.validate-external-gradle-plugin")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.version-catalog` plugin implemented by [org.gradle.api.plugins.catalog.VersionCatalogPlugin]. */ internal val `OrgGradlePluginGroup`.`version-catalog`: PluginDependencySpec get() = plugins.id("org.gradle.version-catalog")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.visual-studio` plugin implemented by [org.gradle.ide.visualstudio.plugins.VisualStudioPlugin]. */ internal val `OrgGradlePluginGroup`.`visual-studio`: PluginDependencySpec get() = plugins.id("org.gradle.visual-studio")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.war` plugin implemented by [org.gradle.api.plugins.WarPlugin]. */ internal val `OrgGradlePluginGroup`.`war`: PluginDependencySpec get() = plugins.id("org.gradle.war")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.windows-resource-script` plugin implemented by [org.gradle.language.rc.plugins.WindowsResourceScriptPlugin]. */ internal val `OrgGradlePluginGroup`.`windows-resource-script`: PluginDependencySpec get() = plugins.id("org.gradle.windows-resource-script")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.windows-resources` plugin implemented by [org.gradle.language.rc.plugins.WindowsResourcesPlugin]. */ internal val `OrgGradlePluginGroup`.`windows-resources`: PluginDependencySpec get() = plugins.id("org.gradle.windows-resources")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.wrapper` plugin implemented by [org.gradle.buildinit.plugins.WrapperPlugin]. */ internal val `OrgGradlePluginGroup`.`wrapper`: PluginDependencySpec get() = plugins.id("org.gradle.wrapper")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.xcode` plugin implemented by [org.gradle.ide.xcode.plugins.XcodePlugin]. */ internal val `OrgGradlePluginGroup`.`xcode`: PluginDependencySpec get() = plugins.id("org.gradle.xcode")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `org.gradle.xctest` plugin implemented by [org.gradle.nativeplatform.test.xctest.plugins.XCTestConventionPlugin]. */ internal val `OrgGradlePluginGroup`.`xctest`: PluginDependencySpec get() = plugins.id("org.gradle.xctest")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `tech.antibytes.gradle.coverage` plugin implemented by [tech.antibytes.gradle.coverage.AntiBytesCoverage]. */ internal val `TechAntibytesGradlePluginGroup`.`coverage`: PluginDependencySpec get() = plugins.id("tech.antibytes.gradle.coverage")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `tech.antibytes.gradle.dependency` plugin implemented by [tech.antibytes.gradle.dependency.AntiBytesDependency]. */ internal val `TechAntibytesGradlePluginGroup`.`dependency`: PluginDependencySpec get() = plugins.id("tech.antibytes.gradle.dependency")</ID>
    <ID>TopLevelPropertyNaming:PluginSpecBuilders.kt$/** * The `tech.antibytes.gradle.publishing` plugin implemented by [tech.antibytes.gradle.publishing.AntiBytesPublishing]. */ internal val `TechAntibytesGradlePluginGroup`.`publishing`: PluginDependencySpec get() = plugins.id("tech.antibytes.gradle.publishing")</ID>
    <ID>UnusedPrivateMember:KTNameCompilerPlugin.kt$KTNameCompilerPlugin$private fun KotlinCompilation&lt;*&gt;.isJsTestTarget(): Boolean</ID>
    <ID>UnusedPrivateMember:KTNameCompilerPlugin.kt$KTNameCompilerPlugin$private fun isApplicableForJs( compilationTarget: KotlinCompilation&lt;*&gt;, ): Boolean</ID>
    <ID>WildcardImport:Accessors16h8i8yvcoyu6adqodek0vazl.kt$import org.gradle.kotlin.dsl.*</ID>
    <ID>WildcardImport:Accessors16h8i8yvcoyu6adqodek0vazl.kt$import org.gradle.kotlin.dsl.accessors.runtime.*</ID>
    <ID>WildcardImport:Accessors1rjydc5cf7y0f6xd8ou20m2o4.kt$import org.gradle.kotlin.dsl.*</ID>
    <ID>WildcardImport:Accessors1rjydc5cf7y0f6xd8ou20m2o4.kt$import org.gradle.kotlin.dsl.accessors.runtime.*</ID>
    <ID>WildcardImport:Accessors20m89wvqrtvolhrxzuq1utrar.kt$import org.gradle.kotlin.dsl.*</ID>
    <ID>WildcardImport:Accessors20m89wvqrtvolhrxzuq1utrar.kt$import org.gradle.kotlin.dsl.accessors.runtime.*</ID>
    <ID>WildcardImport:Accessors2ccw5a3jr4u6s0w7on61o6me9.kt$import org.gradle.kotlin.dsl.*</ID>
    <ID>WildcardImport:Accessors2ccw5a3jr4u6s0w7on61o6me9.kt$import org.gradle.kotlin.dsl.accessors.runtime.*</ID>
    <ID>WildcardImport:Accessors2s1m7qhtdel2iy5x5gc2gv6f5.kt$import org.gradle.kotlin.dsl.*</ID>
    <ID>WildcardImport:Accessors2s1m7qhtdel2iy5x5gc2gv6f5.kt$import org.gradle.kotlin.dsl.accessors.runtime.*</ID>
    <ID>WildcardImport:Accessors33qjl5yednlyp9tyvd6yykvt5.kt$import org.gradle.kotlin.dsl.*</ID>
    <ID>WildcardImport:Accessors33qjl5yednlyp9tyvd6yykvt5.kt$import org.gradle.kotlin.dsl.accessors.runtime.*</ID>
    <ID>WildcardImport:Accessors365te60wp7h43wszbvbl7a76x.kt$import org.gradle.kotlin.dsl.*</ID>
    <ID>WildcardImport:Accessors365te60wp7h43wszbvbl7a76x.kt$import org.gradle.kotlin.dsl.accessors.runtime.*</ID>
    <ID>WildcardImport:Accessors3lkj8uvuyc1fes1zjdaceqluw.kt$import org.gradle.kotlin.dsl.*</ID>
    <ID>WildcardImport:Accessors3lkj8uvuyc1fes1zjdaceqluw.kt$import org.gradle.kotlin.dsl.accessors.runtime.*</ID>
    <ID>WildcardImport:Accessors46nwrg1rs44ofdqpi7vyy3pfc.kt$import org.gradle.kotlin.dsl.*</ID>
    <ID>WildcardImport:Accessors46nwrg1rs44ofdqpi7vyy3pfc.kt$import org.gradle.kotlin.dsl.accessors.runtime.*</ID>
    <ID>WildcardImport:Accessors4cq6for70h038yxssph9k42o3.kt$import org.gradle.kotlin.dsl.*</ID>
    <ID>WildcardImport:Accessors4cq6for70h038yxssph9k42o3.kt$import org.gradle.kotlin.dsl.accessors.runtime.*</ID>
    <ID>WildcardImport:Accessors5cx8iclyvbivcabq86i8mlot5.kt$import org.gradle.kotlin.dsl.*</ID>
    <ID>WildcardImport:Accessors5cx8iclyvbivcabq86i8mlot5.kt$import org.gradle.kotlin.dsl.accessors.runtime.*</ID>
    <ID>WildcardImport:Accessors5r7od1ls1rcal14bwiw1aolf3.kt$import org.gradle.kotlin.dsl.*</ID>
    <ID>WildcardImport:Accessors5r7od1ls1rcal14bwiw1aolf3.kt$import org.gradle.kotlin.dsl.accessors.runtime.*</ID>
    <ID>WildcardImport:Accessors8lcri9ibgd9oj8dt3t8z8nvfx.kt$import org.gradle.kotlin.dsl.*</ID>
    <ID>WildcardImport:Accessors8lcri9ibgd9oj8dt3t8z8nvfx.kt$import org.gradle.kotlin.dsl.accessors.runtime.*</ID>
    <ID>WildcardImport:Accessors9ofjxssccbksmuzem03z8pl6.kt$import org.gradle.kotlin.dsl.*</ID>
    <ID>WildcardImport:Accessors9ofjxssccbksmuzem03z8pl6.kt$import org.gradle.kotlin.dsl.accessors.runtime.*</ID>
    <ID>WildcardImport:Accessors9xbdx9ypglb5iceqwefq3l2u.kt$import org.gradle.kotlin.dsl.*</ID>
    <ID>WildcardImport:Accessors9xbdx9ypglb5iceqwefq3l2u.kt$import org.gradle.kotlin.dsl.accessors.runtime.*</ID>
    <ID>WildcardImport:Accessorsaofthkmarv0q41bodk71vcqi7.kt$import org.gradle.kotlin.dsl.*</ID>
    <ID>WildcardImport:Accessorsaofthkmarv0q41bodk71vcqi7.kt$import org.gradle.kotlin.dsl.accessors.runtime.*</ID>
    <ID>WildcardImport:Accessorsblypoh2ruc9u3bx9djsfqsntg.kt$import org.gradle.kotlin.dsl.*</ID>
    <ID>WildcardImport:Accessorsblypoh2ruc9u3bx9djsfqsntg.kt$import org.gradle.kotlin.dsl.accessors.runtime.*</ID>
    <ID>WildcardImport:Accessorse1rkywyln7kgzh4axk281mwcq.kt$import org.gradle.kotlin.dsl.*</ID>
    <ID>WildcardImport:Accessorse1rkywyln7kgzh4axk281mwcq.kt$import org.gradle.kotlin.dsl.accessors.runtime.*</ID>
    <ID>WildcardImport:Accessorsed7e04c18w9g7176u3w1ie44j.kt$import org.gradle.kotlin.dsl.*</ID>
    <ID>WildcardImport:Accessorsed7e04c18w9g7176u3w1ie44j.kt$import org.gradle.kotlin.dsl.accessors.runtime.*</ID>
    <ID>WildcardImport:ArchivesConfigurationAccessors.kt$import org.gradle.kotlin.dsl.*</ID>
    <ID>WildcardImport:ArchivesConfigurationAccessors.kt$import org.gradle.kotlin.dsl.accessors.runtime.*</ID>
    <ID>WildcardImport:DefaultConfigurationAccessors.kt$import org.gradle.kotlin.dsl.*</ID>
    <ID>WildcardImport:DefaultConfigurationAccessors.kt$import org.gradle.kotlin.dsl.accessors.runtime.*</ID>
  </CurrentIssues>
</SmellBaseline>
